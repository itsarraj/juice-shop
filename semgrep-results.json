                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 29 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                               
  [36m[22m[24m  data/static/codefixes/dbSchemaChallenge_1.ts[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL   
          injection if the variable is user-controlled and is not properly sanitized. In order to
          prevent SQL injection, it is recommended to use parameterized queries or prepared      
          statements.                                                                            
          Details: https://sg.run/gjoe                                                           
                                                                                                 
            5‚îÜ models.sequelize.query("SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%'
               OR description LIKE '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name")     
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.injection.tainted-sql-string.tainted-sql-string[0m
          Detected user input used to manually construct a SQL string. This is usually bad practice  
          because manual construction could accidentally result in a SQL injection. An attacker could
          use a SQL injection to steal or modify contents of the database. Instead, use a            
          parameterized query which is available by default in most database engines. Alternatively, 
          consider using an object-relational mapper (ORM) such as Sequelize which will protect your 
          queries.                                                                                   
          Details: https://sg.run/66ZL                                                               
                                                                                                     
            5‚îÜ models.sequelize.query("SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%'
               OR description LIKE '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name")     
                                                               
  [36m[22m[24m  data/static/codefixes/dbSchemaChallenge_3.ts[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL   
          injection if the variable is user-controlled and is not properly sanitized. In order to
          prevent SQL injection, it is recommended to use parameterized queries or prepared      
          statements.                                                                            
          Details: https://sg.run/gjoe                                                           
                                                                                                 
           11‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.injection.tainted-sql-string.tainted-sql-string[0m
          Detected user input used to manually construct a SQL string. This is usually bad practice  
          because manual construction could accidentally result in a SQL injection. An attacker could
          use a SQL injection to steal or modify contents of the database. Instead, use a            
          parameterized query which is available by default in most database engines. Alternatively, 
          consider using an object-relational mapper (ORM) such as Sequelize which will protect your 
          queries.                                                                                   
          Details: https://sg.run/66ZL                                                               
                                                                                                     
           11‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                                                        
  [36m[22m[24m  data/static/codefixes/unionSqlInjectionChallenge_1.ts[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL   
          injection if the variable is user-controlled and is not properly sanitized. In order to
          prevent SQL injection, it is recommended to use parameterized queries or prepared      
          statements.                                                                            
          Details: https://sg.run/gjoe                                                           
                                                                                                 
            6‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.injection.tainted-sql-string.tainted-sql-string[0m
          Detected user input used to manually construct a SQL string. This is usually bad practice  
          because manual construction could accidentally result in a SQL injection. An attacker could
          use a SQL injection to steal or modify contents of the database. Instead, use a            
          parameterized query which is available by default in most database engines. Alternatively, 
          consider using an object-relational mapper (ORM) such as Sequelize which will protect your 
          queries.                                                                                   
          Details: https://sg.run/66ZL                                                               
                                                                                                     
            6‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                                                        
  [36m[22m[24m  data/static/codefixes/unionSqlInjectionChallenge_3.ts[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL   
          injection if the variable is user-controlled and is not properly sanitized. In order to
          prevent SQL injection, it is recommended to use parameterized queries or prepared      
          statements.                                                                            
          Details: https://sg.run/gjoe                                                           
                                                                                                 
           10‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.injection.tainted-sql-string.tainted-sql-string[0m
          Detected user input used to manually construct a SQL string. This is usually bad practice  
          because manual construction could accidentally result in a SQL injection. An attacker could
          use a SQL injection to steal or modify contents of the database. Instead, use a            
          parameterized query which is available by default in most database engines. Alternatively, 
          consider using an object-relational mapper (ORM) such as Sequelize which will protect your 
          queries.                                                                                   
          Details: https://sg.run/66ZL                                                               
                                                                                                     
           10‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                    
  [36m[22m[24m  lib/insecurity.ts[0m
    ‚ùØ‚ù± [1mjavascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret[0m
          A hard-coded credential was detected. It is not recommended to store credentials in source-
          code, as this risks secrets being leaked and used by either an internal or external        
          malicious adversary. It is recommended to use environment variables to securely provide    
          credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module). 
          Details: https://sg.run/4xN9                                                               
                                                                                                     
           56‚îÜ export const authorize = (user = {}) => jwt.sign(user, privateKey, { expiresIn:
               '6h', algorithm: 'RS256' })                                                    
                                    
  [36m[22m[24m  routes/chatbot.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.injection.raw-html-format.raw-html-format[0m
          User data flows into the host portion of this manually-constructed HTML. This can introduce
          a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider
          using a sanitization library such as DOMPurify to sanitize the HTML within.                
          Details: https://sg.run/5DO3                                                               
                                                                                                     
          198‚îÜ body: bot.training.state ? bot.greet(`${user.id}`) :                         
               `${config.get<string>('application.chatBot.name')} isn't ready at the moment,
               please wait while I set things up`                                           
                                        
  [36m[22m[24m  routes/dataErasure.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-[0m
  [1m     traversal[0m                                                                                       
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           69‚îÜ const filePath: string = path.resolve(req.body.layout).toLowerCase()
                                       
  [36m[22m[24m  routes/fileServer.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           33‚îÜ res.sendFile(path.resolve('ftp/', file))
                                      
  [36m[22m[24m  routes/keyServer.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14‚îÜ res.sendFile(path.resolve('encryptionkeys/', file))
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-[0m
  [1m     traversal[0m                                                                                       
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14‚îÜ res.sendFile(path.resolve('encryptionkeys/', file))
                                          
  [36m[22m[24m  routes/logfileServer.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14‚îÜ res.sendFile(path.resolve('logs/', file))
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-[0m
  [1m     traversal[0m                                                                                       
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14‚îÜ res.sendFile(path.resolve('logs/', file))
                                  
  [36m[22m[24m  routes/login.ts[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL   
          injection if the variable is user-controlled and is not properly sanitized. In order to
          prevent SQL injection, it is recommended to use parameterized queries or prepared      
          statements.                                                                            
          Details: https://sg.run/gjoe                                                           
                                                                                                 
           36‚îÜ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}'
               AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, 
               { model: UserModel, plain: true }) // vuln-code-snippet vuln-line                  
               loginAdminChallenge loginBenderChallenge loginJimChallenge                         
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.injection.tainted-sql-string.tainted-sql-string[0m
          Detected user input used to manually construct a SQL string. This is usually bad practice  
          because manual construction could accidentally result in a SQL injection. An attacker could
          use a SQL injection to steal or modify contents of the database. Instead, use a            
          parameterized query which is available by default in most database engines. Alternatively, 
          consider using an object-relational mapper (ORM) such as Sequelize which will protect your 
          queries.                                                                                   
          Details: https://sg.run/66ZL                                                               
                                                                                                     
           36‚îÜ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}'
               AND password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, 
               { model: UserModel, plain: true }) // vuln-code-snippet vuln-line                  
               loginAdminChallenge loginBenderChallenge loginJimChallenge                         
                                                  
  [36m[22m[24m  routes/profileImageUrlUpload.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-ssrf.express-ssrf[0m
          The following request request.get() was found to be crafted from user-input `req` which can 
          lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible
          to not allow user-input to craft the base request, but to be treated as part of the path or 
          query parameter. When user-input is necessary to craft the request, it is recommeneded to   
          follow OWASP best practices to prevent abuse.                                               
          Details: https://sg.run/0PNw                                                                
                                                                                                      
           23‚îÜ .get(url)
                                             
  [36m[22m[24m  routes/quarantineServer.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14‚îÜ res.sendFile(path.resolve('ftp/quarantine/', file))
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-[0m
  [1m     traversal[0m                                                                                       
          Possible writing outside of the destination, make sure that the target path is nested in the
          intended destination                                                                        
          Details: https://sg.run/weRn                                                                
                                                                                                      
           14‚îÜ res.sendFile(path.resolve('ftp/quarantine/', file))
                                     
  [36m[22m[24m  routes/redirect.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-open-redirect.express-open-redirect[0m
          The application redirects to a URL specified by user-supplied input `query` that is not     
          validated. This could redirect users to malicious locations. Consider using an allow-list   
          approach to validate URLs, or warn users they are being redirected to a third-party website.
          Details: https://sg.run/EpoP                                                                
                                                                                                      
           19‚îÜ res.redirect(toUrl)
                                   
  [36m[22m[24m  routes/search.ts[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL   
          injection if the variable is user-controlled and is not properly sanitized. In order to
          prevent SQL injection, it is recommended to use parameterized queries or prepared      
          statements.                                                                            
          Details: https://sg.run/gjoe                                                           
                                                                                                 
           23‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-  
               code-snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge                
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.injection.tainted-sql-string.tainted-sql-string[0m
          Detected user input used to manually construct a SQL string. This is usually bad practice  
          because manual construction could accidentally result in a SQL injection. An attacker could
          use a SQL injection to steal or modify contents of the database. Instead, use a            
          parameterized query which is available by default in most database engines. Alternatively, 
          consider using an object-relational mapper (ORM) such as Sequelize which will protect your 
          queries.                                                                                   
          Details: https://sg.run/66ZL                                                               
                                                                                                     
           23‚îÜ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-  
               code-snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge                
                                        
  [36m[22m[24m  routes/userProfile.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.express-insecure-template-usage.express-insecure-template-usage[0m
          User data from `req` is being compiled into the template, which can lead to a Server Side
          Template Injection (SSTI) vulnerability.                                                 
          Details: https://sg.run/b49v                                                             
                                                                                                   
           56‚îÜ const fn = pug.compile(template)
                            
  [36m[22m[24m  server.ts[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.express-check-directory-listing.express-check-directory-listing[0m
          Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories
          and files. It is recommended to disable directory listing unless it is a public resource. If
          you need directory listing, ensure that sensitive files are inaccessible when querying the  
          resource.                                                                                   
          Details: https://sg.run/DX2G                                                                
                                                                                                      
          260‚îÜ app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-
               code-snippet vuln-line directoryListingChallenge                                  
            ‚ãÆ‚îÜ----------------------------------------
          264‚îÜ app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons:
               true, view: 'details' }))                                                       
            ‚ãÆ‚îÜ----------------------------------------
          268‚îÜ app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', {
               icons: true, view: 'details' }))                                               
            ‚ãÆ‚îÜ----------------------------------------
          272‚îÜ app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true,
               view: 'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge 
